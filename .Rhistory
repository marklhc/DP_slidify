qnbinom(runif(n, dnbinom(0, mu = mu, size = size), 1),
mu = mu, size = size)
}
GenClusID <- function(csize_unscaled, N) {
# Convert cluster sizes of length = nclus to a vector of cluster ids
# of length = N
#
# Args:
#   csize_unscaled: A vector of length = nclus, indicating
#                   the distribution of cluster sizes.
#   N: Number of level-1 units.
#   nclus: Number of clusters.
# Returns:
#   A vector of length exactly equals N.
nclus <- length(csize_unscaled)
count <- ceiling(prop.table(csize_unscaled) * N)
clus_id_unscaled <- unlist(mapply(rep, 1:nclus, times = count))
clus_id <- sample(clus_id_unscaled, N)
return(clus_id)
}
GenData <- function(lambda, icc, nclus, csize, csize_dist = c('balanced', 'NB'),
tau = rep(0, nrow(lambda)),
theta_delta = 1 - diag(lambda %*% matrix(phi_w) %*% t(lambda)),
phi_w = matrix(1)) {
# Generate multilevel data using matrix input.
#
# Args:
#   lambda: Factor loading matrix.
#   icc: Intra-class correlation.
#   nclus: Number of clusters.
#   csize: Average cluster size.
#   csize_dist: Distribution of cluster sizes; Either balanced or a NB distribution.
#   tau: A vector of the intercepts of observed indicators; default is a 0 vector.
#   theta_delta: Symmetric matrix of level-1 residual covariances;
#                default is a diagnoal matrix with all observed variables standardized.
#   phi_w: Matrix (or scalar) of latent variable(s) in the within-level; default is the scalar 1.0.
# Returns:
#   A data frame with nclus*csize rows.
phi_b <- icc / (phi_w - icc)
data_between <- mvrnorm(nclus, mu = tau, Sigma = lambda %*% phi_b %*% lambda)
Sigma_w <- lambda %*% phi_w %*% lambda + theta_delta
N <- nclus * csize
data_within <- mvrnorm(N, mu = rep(0, nrow(lambda)), Sigma = Sigma_w)
if (ndist == 'balanced') {
clus_id <- rep(1:nclus, each = csize)
} else if (ndist == 'NB') {
csize_unscaled <- rtnbinom(nclus, mu = csize, var = 5 * csize)
clus_id <- GenClusID(csize_unscaled, N)
}
data_all <- data.frame(data_within + data_between[clus_id, ], clus_id)
names(data_all) <- c(paste0('x', 1:6), 'clus')
return(data_all)
}
GenData(lambda = matrix(c(.7, .3, .5, .6, .7, .7), ncol = 1), icc = .1, beta = .3,
nclus = 50, csize = 50, csize_dist = "NB")
GenData(lambda = matrix(c(.7, .3, .5, .6, .7, .7), ncol = 1), icc = .1,
nclus = 50, csize = 50, csize_dist = "NB")
.1 / (matrix(1) - .1)
phi_b <- .1 / (matrix(1) - .1)
lambda
# ----------------------------------------------------------------------- #
# Script to generate multilevel measurement data
# ----------------------------------------------------------------------- #
library(MASS)
rtnbinom <- function(n, mu, var) {
# Generate from a zero-truncated negative binomial (NB).
#
# Args:
#   n: Number of random data points.
#   mu: Mean parameter for NB distribution.
#   var: Approximate variance for NB distribution.
#
# Returns:
#   A random vector with n elements from a NB distribution.
size <- mu^2 / (var - mu)
qnbinom(runif(n, dnbinom(0, mu = mu, size = size), 1),
mu = mu, size = size)
}
GenClusID <- function(csize_unscaled, N) {
# Convert cluster sizes of length = nclus to a vector of cluster ids
# of length = N
#
# Args:
#   csize_unscaled: A vector of length = nclus, indicating
#                   the distribution of cluster sizes.
#   N: Number of level-1 units.
#   nclus: Number of clusters.
# Returns:
#   A vector of length exactly equals N.
nclus <- length(csize_unscaled)
count <- ceiling(prop.table(csize_unscaled) * N)
clus_id_unscaled <- unlist(mapply(rep, 1:nclus, times = count))
clus_id <- sample(clus_id_unscaled, N)
return(clus_id)
}
GenData <- function(lambda, icc, nclus, csize, csize_dist = c('balanced', 'NB'),
tau = rep(0, nrow(lambda)),
theta_delta = 1 - diag(lambda %*% matrix(phi_w) %*% t(lambda)),
phi_w = matrix(1)) {
# Generate multilevel data using matrix input.
#
# Args:
#   lambda: Factor loading matrix.
#   icc: Intra-class correlation.
#   nclus: Number of clusters.
#   csize: Average cluster size.
#   csize_dist: Distribution of cluster sizes; Either balanced or a NB distribution.
#   tau: A vector of the intercepts of observed indicators; default is a 0 vector.
#   theta_delta: Symmetric matrix of level-1 residual covariances;
#                default is a diagnoal matrix with all observed variables standardized.
#   phi_w: Matrix (or scalar) of latent variable(s) in the within-level; default is the scalar 1.0.
# Returns:
#   A data frame with nclus*csize rows.
phi_b <- icc / (phi_w - icc)
data_between <- mvrnorm(nclus, mu = tau, Sigma = lambda %*% phi_b %*% t(lambda))
Sigma_w <- lambda %*% phi_w %*% t(lambda) + theta_delta
N <- nclus * csize
data_within <- mvrnorm(N, mu = rep(0, nrow(lambda)), Sigma = Sigma_w)
if (ndist == 'balanced') {
clus_id <- rep(1:nclus, each = csize)
} else if (ndist == 'NB') {
csize_unscaled <- rtnbinom(nclus, mu = csize, var = 5 * csize)
clus_id <- GenClusID(csize_unscaled, N)
}
data_all <- data.frame(data_within + data_between[clus_id, ], clus_id)
names(data_all) <- c(paste0('x', 1:6), 'clus')
return(data_all)
}
GenData(lambda = matrix(c(.7, .3, .5, .6, .7, .7), ncol = 1), icc = .1,
nclus = 50, csize = 50, csize_dist = "NB")
phi_w <- matrix(1)
lambda %*% phi_w %*% t(lambda)
1 - diag(lambda %*% matrix(phi_w) %*% t(lambda))
# ----------------------------------------------------------------------- #
# Script to generate multilevel measurement data
# ----------------------------------------------------------------------- #
library(MASS)
rtnbinom <- function(n, mu, var) {
# Generate from a zero-truncated negative binomial (NB).
#
# Args:
#   n: Number of random data points.
#   mu: Mean parameter for NB distribution.
#   var: Approximate variance for NB distribution.
#
# Returns:
#   A random vector with n elements from a NB distribution.
size <- mu^2 / (var - mu)
qnbinom(runif(n, dnbinom(0, mu = mu, size = size), 1),
mu = mu, size = size)
}
GenClusID <- function(csize_unscaled, N) {
# Convert cluster sizes of length = nclus to a vector of cluster ids
# of length = N
#
# Args:
#   csize_unscaled: A vector of length = nclus, indicating
#                   the distribution of cluster sizes.
#   N: Number of level-1 units.
#   nclus: Number of clusters.
# Returns:
#   A vector of length exactly equals N.
nclus <- length(csize_unscaled)
count <- ceiling(prop.table(csize_unscaled) * N)
clus_id_unscaled <- unlist(mapply(rep, 1:nclus, times = count))
clus_id <- sample(clus_id_unscaled, N)
return(clus_id)
}
GenData <- function(lambda, icc, nclus, csize, csize_dist = c('balanced', 'NB'),
tau = rep(0, nrow(lambda)),
theta_delta = diag(1 - diag(lambda %*% matrix(phi_w) %*% t(lambda))),
phi_w = matrix(1)) {
# Generate multilevel data using matrix input.
#
# Args:
#   lambda: Factor loading matrix.
#   icc: Intra-class correlation.
#   nclus: Number of clusters.
#   csize: Average cluster size.
#   csize_dist: Distribution of cluster sizes; Either balanced or a NB distribution.
#   tau: A vector of the intercepts of observed indicators; default is a 0 vector.
#   theta_delta: Symmetric matrix of level-1 residual covariances;
#                default is a diagnoal matrix with all observed variables standardized.
#   phi_w: Matrix (or scalar) of latent variable(s) in the within-level; default is the scalar 1.0.
# Returns:
#   A data frame with nclus*csize rows.
phi_b <- icc / (phi_w - icc)
data_between <- mvrnorm(nclus, mu = tau, Sigma = lambda %*% phi_b %*% t(lambda))
Sigma_w <- lambda %*% phi_w %*% t(lambda) + theta_delta
N <- nclus * csize
data_within <- mvrnorm(N, mu = rep(0, nrow(lambda)), Sigma = Sigma_w)
if (ndist == 'balanced') {
clus_id <- rep(1:nclus, each = csize)
} else if (ndist == 'NB') {
csize_unscaled <- rtnbinom(nclus, mu = csize, var = 5 * csize)
clus_id <- GenClusID(csize_unscaled, N)
}
data_all <- data.frame(data_within + data_between[clus_id, ], clus_id)
names(data_all) <- c(paste0('x', 1:6), 'clus')
return(data_all)
}
GenData(lambda = matrix(c(.7, .3, .5, .6, .7, .7), ncol = 1), icc = .1,
nclus = 50, csize = 50, csize_dist = "NB")
# ----------------------------------------------------------------------- #
# Script to generate multilevel measurement data
# ----------------------------------------------------------------------- #
library(MASS)
rtnbinom <- function(n, mu, var) {
# Generate from a zero-truncated negative binomial (NB).
#
# Args:
#   n: Number of random data points.
#   mu: Mean parameter for NB distribution.
#   var: Approximate variance for NB distribution.
#
# Returns:
#   A random vector with n elements from a NB distribution.
size <- mu^2 / (var - mu)
qnbinom(runif(n, dnbinom(0, mu = mu, size = size), 1),
mu = mu, size = size)
}
GenClusID <- function(csize_unscaled, N) {
# Convert cluster sizes of length = nclus to a vector of cluster ids
# of length = N
#
# Args:
#   csize_unscaled: A vector of length = nclus, indicating
#                   the distribution of cluster sizes.
#   N: Number of level-1 units.
#   nclus: Number of clusters.
# Returns:
#   A vector of length exactly equals N.
nclus <- length(csize_unscaled)
count <- ceiling(prop.table(csize_unscaled) * N)
clus_id_unscaled <- unlist(mapply(rep, 1:nclus, times = count))
clus_id <- sample(clus_id_unscaled, N)
return(clus_id)
}
GenData <- function(lambda, icc, nclus, csize, csize_dist = c('balanced', 'NB'),
tau = rep(0, nrow(lambda)),
theta_delta = diag(1 - diag(lambda %*% matrix(phi_w) %*% t(lambda))),
phi_w = matrix(1)) {
# Generate multilevel data using matrix input.
#
# Args:
#   lambda: Factor loading matrix.
#   icc: Intra-class correlation.
#   nclus: Number of clusters.
#   csize: Average cluster size.
#   csize_dist: Distribution of cluster sizes; Either balanced or a NB distribution.
#   tau: A vector of the intercepts of observed indicators; default is a 0 vector.
#   theta_delta: Symmetric matrix of level-1 residual covariances;
#                default is a diagnoal matrix with all observed variables standardized.
#   phi_w: Matrix (or scalar) of latent variable(s) in the within-level; default is the scalar 1.0.
# Returns:
#   A data frame with nclus*csize rows.
phi_b <- icc / (phi_w - icc)
data_between <- mvrnorm(nclus, mu = tau, Sigma = lambda %*% phi_b %*% t(lambda))
Sigma_w <- lambda %*% phi_w %*% t(lambda) + theta_delta
N <- nclus * csize
data_within <- mvrnorm(N, mu = rep(0, nrow(lambda)), Sigma = Sigma_w)
if (csize_dist == 'balanced') {
clus_id <- rep(1:nclus, each = csize)
} else if (csize_dist == 'NB') {
csize_unscaled <- rtnbinom(nclus, mu = csize, var = 5 * csize)
clus_id <- GenClusID(csize_unscaled, N)
}
data_all <- data.frame(data_within + data_between[clus_id, ], clus_id)
names(data_all) <- c(paste0('x', 1:6), 'clus')
return(data_all)
}
GenData(lambda = matrix(c(.7, .3, .5, .6, .7, .7), ncol = 1), icc = .1,
nclus = 50, csize = 50, csize_dist = "NB")
?switch
GenMplusInp <- function(type = c("config", "scalar")) {
# Generate Mplus code for running invariance models.
#
# Args:
#   type: Whether the model is configural or scalar invariance.
# Returns:
#   A string of Mplus code.
between_residual <- switch(type,
"config" = "          y1-y6;",
"scalar" = "          y1-y6@0;")
save_names <- switch(type,
"config" = "fit(no_constraint).dat",
"scalar" = "fit(constraint).dat")
return(c("Data:     File is replist.dat;",
"          Type = montecarlo;",
"Variable: Names = clus y1-y6;",
"          Usevar = y1-y6;",
"          Cluster = clus;",
"Analysis: Type = twolevel;",
"          Process = 8;",
"Model:    %within%",
"          fw by y1* y2-y6 (l1-l6);",
"          fw@1;",
"          %between%",
"          fb by y1* y2-y6 (l1-l6);",
between_residual,
paste0("Savedata: results = ", save_names, ";")))
}
GenMplusInp("config")
GenMplusInp("scalar")
nclus <- 50
subgroup_ratio <- c(1, 3, 7)
nclus_subgroup <- nclus * subgroup_ratio / sum(subgroup_ratio)
nclus_subgroup
ceiling(nclus_subgroup)
?ceiling
nclus_subgroup <- floor(nclus * subgroup_ratio / sum(subgroup_ratio))
nclus_subgroup[1] <- nclus - nclus_subgroup[-1]
nclus_subgroup <- floor(nclus * subgroup_ratio / sum(subgroup_ratio))
nclus_subgroup[1] <- nclus - sum(nclus_subgroup[-1])
nclus_subgroup
csize
csize <- 30
N_subgroup <- nclus_subgroup * csize
N_subgroup
sum(N_subgroup)
lambda
tau_patterns <- list(rep(0, 6), c(0, 0, 0, 0.1, 0.1, 0.1), c(0, 0, 0, 0.1, 0.2, 0.3))
GenData <- function(lambda, icc, nclus, csize, csize_dist = c('balanced', 'NB'),
skip = 0, tau = rep(0, nrow(lambda)),
theta_delta = diag(1 - diag(lambda %*% matrix(phi_w) %*% t(lambda))),
phi_w = matrix(1)) {
# Generate multilevel data using matrix input.
#
# Args:
#   lambda: Factor loading matrix.
#   icc: Intra-class correlation.
#   nclus: Number of clusters.
#   csize: Average cluster size.
#   csize_dist: Distribution of cluster sizes; Either balanced or a NB distribution.
#   tau: A vector of the intercepts of observed indicators; default is a 0 vector.
#   theta_delta: Symmetric matrix of level-1 residual covariances;
#                default is a diagnoal matrix with all observed variables standardized.
#   phi_w: Matrix (or scalar) of latent variable(s) in the within-level; default is the scalar 1.0.
# Returns:
#   A data frame with nclus*csize rows.
phi_b <- icc / (phi_w - icc)
data_between <- mvrnorm(nclus, mu = tau, Sigma = lambda %*% phi_b %*% t(lambda))
Sigma_w <- lambda %*% phi_w %*% t(lambda) + theta_delta
N <- nclus * csize
data_within <- mvrnorm(N, mu = rep(0, nrow(lambda)), Sigma = Sigma_w)
if (csize_dist == 'balanced') {
clus_id <- rep(1:nclus, each = csize)
} else if (csize_dist == 'NB') {
csize_unscaled <- rtnbinom(nclus, mu = csize, var = 5 * csize)
clus_id <- GenClusID(csize_unscaled, N)
}
data_all <- data.frame(data_within + data_between[clus_id, ], clus_id + skip)
names(data_all) <- c(paste0('x', 1:6), 'clus')
return(data_all)
}
# Uncomment to test the function
# GenData(lambda = matrix(c(.7, .3, .5, .6, .7, .7), ncol = 1), icc = .1,
#        nclus = 50, csize = 50, csize_dist = "NB")
N_subgroup <- nclus_subgroup * csize
for (i in 1:nrep) {
dataset <- mapply(Gendata, nclus = nclus_subgroup, tau = tau_patterns,
lambda = lambda, icc = icc, csize = csize, csize_dist = csize_dist,
skip = c(0, N_subgroup - 1))
}
dataset <- mapply(Gendata, nclus = nclus_subgroup, tau = tau_patterns,
lambda = lambda, icc = icc, csize = csize, csize_dist = csize_dist,
skip = c(0, N_subgroup - 1))
dataset <- mapply(GenData, nclus = nclus_subgroup, tau = tau_patterns,
lambda = lambda, icc = icc, csize = csize, csize_dist = csize_dist,
skip = c(0, N_subgroup - 1))
icc <- .1
dataset <- mapply(GenData, nclus = nclus_subgroup, tau = tau_patterns,
lambda = lambda, icc = icc, csize = csize, csize_dist = csize_dist,
skip = c(0, N_subgroup - 1))
csize_dist <- 'balanced'
dataset <- mapply(GenData, nclus = nclus_subgroup, tau = tau_patterns,
lambda = lambda, icc = icc, csize = csize, csize_dist = csize_dist,
skip = c(0, N_subgroup - 1))
?mapply
dataset <- mapply(GenData, nclus = nclus_subgroup, tau = tau_patterns,
skip = c(0, N_subgroup - 1),
MoreArgs = list(lambda = lambda, icc = icc, csize = csize,
csize_dist = csize_dist))
N_subgroup
nclus_subgroup
tau
tau_patterns
c(0, N_subgroup - 1)
dataset <- mapply(GenData, nclus = nclus_subgroup, tau = tau_patterns,
skip = c(0, N_subgroup[-1]),
MoreArgs = list(lambda = lambda, icc = icc, csize = csize,
csize_dist = csize_dist))
dataset
dataset <- mapply(GenData, nclus = nclus_subgroup, tau = tau_patterns,
skip = c(0, N_subgroup[-1]),
MoreArgs = list(lambda = lambda, icc = icc, csize = csize,
csize_dist = csize_dist), SIMPLIFY = TRUE)
dataset
dataset[ , 1]
dataset[ , 2]
dataset[ , 3]
dataset <- mapply(GenData, nclus = nclus_subgroup, tau = tau_patterns,
skip = c(0, nclus_subgroup[-1]),
MoreArgs = list(lambda = lambda, icc = icc, csize = csize,
csize_dist = csize_dist))
dataset[ , 1]
GenData <- function(lambda, icc, nclus, csize, csize_dist = c('balanced', 'NB'),
skip = 0, tau = rep(0, nrow(lambda)),
theta_delta = diag(1 - diag(lambda %*% matrix(phi_w) %*% t(lambda))),
phi_w = matrix(1)) {
# Generate multilevel data using matrix input.
#
# Args:
#   lambda: Factor loading matrix.
#   icc: Intra-class correlation.
#   nclus: Number of clusters.
#   csize: Average cluster size.
#   csize_dist: Distribution of cluster sizes; Either balanced or a NB distribution.
#   tau: A vector of the intercepts of observed indicators; default is a 0 vector.
#   theta_delta: Symmetric matrix of level-1 residual covariances;
#                default is a diagnoal matrix with all observed variables standardized.
#   phi_w: Matrix (or scalar) of latent variable(s) in the within-level; default is the scalar 1.0.
# Returns:
#   A data frame with nclus*csize rows.
phi_b <- icc / (phi_w - icc)
data_between <- mvrnorm(nclus, mu = tau, Sigma = lambda %*% phi_b %*% t(lambda))
Sigma_w <- lambda %*% phi_w %*% t(lambda) + theta_delta
N <- nclus * csize
data_within <- mvrnorm(N, mu = rep(0, nrow(lambda)), Sigma = Sigma_w)
if (csize_dist == 'balanced') {
clus_id <- rep(1:nclus, each = csize)
} else if (csize_dist == 'NB') {
csize_unscaled <- rtnbinom(nclus, mu = csize, var = 5 * csize)
clus_id <- GenClusID(csize_unscaled, N)
}
data_all <- cbind(data_within + data_between[clus_id, ], clus_id + skip)
colnames(data_all) <- c(paste0('x', 1:6), 'clus')
return(data_all)
}
dataset <- mapply(GenData, nclus = nclus_subgroup, tau = tau_patterns,
skip = c(0, nclus_subgroup[-1]),
MoreArgs = list(lambda = lambda, icc = icc, csize = csize,
csize_dist = csize_dist))
dataset
dataset <- mapply(GenData, nclus = nclus_subgroup, tau = tau_patterns,
skip = c(0, nclus_subgroup[-1]),
MoreArgs = list(lambda = lambda, icc = icc, csize = csize,
csize_dist = csize_dist), SIMPLIFY = TRUE)
dataset
do.call(rbind, dataset)
?write.table
dataset <- do.call(rbind, dataset)
dataset$clus
dataset[ , clus]
dataset[ , "clus"]
nclus_subgroup
nclus_subgroup[-1]
head(nclus_subgroup, -1)
dataset <- mapply(GenData, nclus = nclus_subgroup, tau = tau_patterns,
skip = c(0, head(nclus_subgroup, -1)),
MoreArgs = list(lambda = lambda, icc = icc, csize = csize,
csize_dist = csize_dist))
dataset <- do.call(rbind, dataset)
head(nclus_subgroup, -1)
dataset[ , "clus"]
icc <- c(.05, .122, .212)
nclus <- c(34, 70, 190)
csize <- c(7, 20, 43)
num_ninv_int <- c(0, 1, 2)
delta_int <- c(0.2, 0.5)
group2_prop <- c(.2, .5)
designmatrix <- expand.grid(icc = icc, nclus = nclus, csize = csize, num_ninv_int = num_ninv_int,
delta_int = delta_int, group2_prop = group2_prop)
duplicated <- with(designmatrix, num_ninv_int == 0 & !(delta_int == 0.2 & group2_prop == 0.2))
designmatrix <- subset(designmatrix, !duplicated)
subgroup_weight <- sapply(1:nrow(designmatrix), function(i) {
prop <- designmatrix[i, "group2_prop"]
subgroup_weight <- c(1 - prop, prop)
if (designmatrix[i , "num_ninv_int"] == 0) subgroup_weight <- 1
return(subgroup_weight)
})
tau <- lapply(1:nrow(designmatrix), function(i) {
tau <- matrix(rep(0, 6))
if (designmatrix[i , "num_ninv_int"] > 0) {
tau2 <- tau
tau2[tail(1:6, designmatrix[i, "num_ninv_int"])] <- designmatrix[i, "delta_int"]
tau <- list(tau, tau2)
}
return(tau)
})
which(rownames(designmatrix) == "156")
which(rownames(designmatrix) %in% c("156", "290")
)
as.character(318:324)
which(rownames(designmatrix) %in% c("156", "290", as.character(318:324)))
install.packages("devtools")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
setwd("~/../Dropbox/Course/Others/data_product/slidify_PA/")
setwd("~/../Dropbox/Course/Others/data_product/")
author("slidify_project")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
library(shiny)
install.packages("shiny")
shinyServer(
)
